import logging

import os
from datetime import date
from random import choices as randchoices
import yaml
import pandas as pd
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

HW_NUM, HW_FILE, HW_QUESTION = range(3)
CH_NUM, CH_DAY, CH_STUD = range(3)

class IlluminatiBot:
    common_commands = {
        'start': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–ø–∏—Å–∫–∞–º',
        'help': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
        'contacts': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞ —Å –æ–±—å—è—Å–Ω–µ–Ω–∏–µ–º —Ä–æ–ª–µ–π',
    }
    commands = {
        'admin':{
            **common_commands,
            'add_day date': '–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –¥–Ω—è –∑–∞–Ω—è—Ç–∏–π'\
                '–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö\n (–µ—Å–ª–∏ –±–µ–∑ –¥–∞—Ç—ã, —Ç–æ —Å–µ–≥–æ–¥–Ω—è)',
            # not implemented
            'check_hw': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å'

        },
        'student':{
            **common_commands,
            'homework': '–°–¥–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É.\n'\
                '–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥—ã'\
                ' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n –∫ –ø—Ä–∏–º–µ—Ä—É: /hw 3',
        },
    }
    def __init__(self):
        self.hwdir = 'homeworks'
        self.students = 'students.csv'
        self.admins = 'assistants.csv'# –†–æ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ö—É—Ä–∞—Ç–æ—Ä, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
        self.lessons_passed = 0
        self.lessons = []

        if not os.path.exists(self.hwdir):
            os.makedirs(self.hwdir)
        if not os.path.exists(self.students):
            pd.DataFrame(columns=['–ò–º—è', '–ù–∏–∫']).to_csv(self.students, index=False)
        else:
            last_col_name = pd.read_csv(self.students).columns[-1]
            if last_col_name[0] in '0123456789':
                self.lessons_passed = int(last_col_name.split('_', 1)[0])
        if not os.path.exists(self.admins):
            pd.DataFrame(columns=['–ò–º—è', '–ù–∏–∫', '–†–æ–ª—å']).to_csv(self.admins, index=False)

        self.hw_ids = pd.DataFrame(
                index=pd.read_csv(self.students)['–ò–º—è'],
                columns=range(1, self.lessons_passed+1)
                )

        with open("config.yaml", "r") as file:
            token = yaml.safe_load(file)['token']
        application = Application.builder().token(token).build()
        self.application = application

        # Add start and help commands handler
        start_handler = CommandHandler("start", self.start)
        application.add_handler(start_handler)
        help_handler = CommandHandler("help", self.help)
        application.add_handler(help_handler)
        contacts_handler = CommandHandler("contacts", self.contacts)
        application.add_handler(contacts_handler)

        day_handler = CommandHandler("add_day", self.add_day)
        application.add_handler(day_handler)

        # Add conversation handler
        hw_handler = ConversationHandler(
            entry_points=[CommandHandler(["homework", "hw"], self.hw_start)],
            states={
                HW_NUM: [
                    MessageHandler(
                        filters.Regex("^[0-9]+$"), self.hw_num
                    ),
                ],
                HW_FILE: [
                    MessageHandler(
                        filters.Document.ALL , self.hw_file
                    ),
                ],
                HW_QUESTION: [
                    MessageHandler(
                        filters.TEXT & ~(filters.COMMAND | filters.Regex("^üòÑ$")), self.hw_question,
                    ),
                    MessageHandler(
                        filters.Regex("^üòÑ$") & ~(filters.COMMAND), self.hw_end,
                    )
                ],
            },
            fallbacks=[CommandHandler('cancel', self.hw_cancel)],
        )
        application.add_handler(hw_handler)

        ch_handler = ConversationHandler(
            entry_points=[CommandHandler(["check_homework", "check_hw"], self.ch_start)],
            states={
                CH_NUM: [
                    MessageHandler(
                        filters.Regex("^[0-9]+$"), self.ch_num
                    ),
                ],
                CH_DAY: [
                    MessageHandler(
                        filters.Regex("^[0-9]+$"), self.ch_day
                    ),
                    CommandHandler('next', self.ch_next),
                    CommandHandler('task', self.ch_task),
                ],
                CH_STUD: [
                    MessageHandler(
                        filters.TEXT & ~(filters.COMMAND), self.ch_stud,
                    ),
                    CommandHandler('next', self.ch_next),
                    CommandHandler('task', self.ch_task),
                    CommandHandler('all', self.ch_all),
                ],
            },
            fallbacks=[CommandHandler('cancel', self.ch_cancel)],
        )
        application.add_handler(ch_handler)

    def update_hw_ids_index(self):
        if(len(pd.read_csv(self.students)) != len(self.hw_ids)) or (
            (pd.read_csv(self.students)['–ò–º—è'] != self.hw_ids.index).any() ):
            self.hw_ids = pd.merge(
                pd.read_csv(self.students)['–ò–º—è'].to_frame().set_index('–ò–º—è'),
                self.hw_ids,
                left_index=True,
                right_index=True
                     )

    def run(self):
        """Run the bot until the user presses Ctrl-C"""
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        username = '@' + update.effective_chat.username
        name = update.effective_chat.first_name
        student_df = pd.read_csv(self.students)
        admin_df = pd.read_csv(self.admins)
        if (username == student_df['–ù–∏–∫']).any():
            context.user_data['auth'] = 'student'
            context.user_data['num'] = student_df.query(f"–ù–∏–∫ == '{username}'").index[0]
            message = (
            '–¢—ã, –ø–æ—Ö–æ–∂–µ, —É—á–∞—â–∏–π—Å—è –∫—É—Ä—Å–∞)\n' 
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n' 
            '–≠—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, ' 
            '–∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤.\n'
            '–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!')
        elif (username == admin_df['–ù–∏–∫']).any():
            context.user_data['auth'] = 'admin'
            message = (
            '–¢—ã, –ø–æ—Ö–æ–∂–µ, —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π)\n'
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n'
            f'–£ —Ç–µ–±—è —Ä–æ–ª—å {admin_df.loc[admin_df['–ù–∏–∫']==username, '–†–æ–ª—å'].item()}.\n'
            '–≠—Ç–æ—Ç –±–æ—Ç —Ç—É—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Ç–µ–±–µ).')
        else:
            if len(admin_df) > 0:
                curator = admin_df.query('–†–æ–ª—å == "–ö—É—Ä–∞—Ç–æ—Ä"').iloc[0]
            else:
                curator = {'–ò–º—è':'–ò–º—è', '–ù–∏–∫':'–ù–∏–∫'}
            message = (
            f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö, {name}!\n'
            '–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, —Ç–æ –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É –∫—É—Ä—Å–∞ '
            f'{curator['–ò–º—è']}:{curator['–ù–∏–∫']}')
        await update.message.reply_text(message)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if 'auth' not in context.user_data:
            await update.message.reply_text(
                                      '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                                      )
        elif context.user_data['auth'] == 'admin':
            await update.message.reply_text(
                f'—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n' +
                '\n'.join(f'/{command}:\n {descr}' for command, descr in self.commands['admin'].items())
            )
        elif context.user_data['auth'] == 'student':
            await update.message.reply_text(
                f'—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n' +
                '\n'.join(f'/{command}:\n {descr}' for command, descr in self.commands['student'].items())
            )
        else:
            print(f"user @{update.effective_user.username} has undetected role {context.user_data['auth']}")
            await update.message.reply_text('Role not recognized')

    async def contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        admins_df = pd.read_csv(self.admins)
        message = '–ü—Ä–æ—à—É –ª—é–±–∏—Ç—å –∏ –∂–∞–ª–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–∞)\n\n'
        for group, df in admins_df.groupby('–†–æ–ª—å', sort=False):
            if group == '–ö—É—Ä–∞—Ç–æ—Ä':
                message += '–ö—É—Ä–∞—Ç–æ—Ä, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫—É—Ä—Å–∞:\n'
            elif group == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
                message += '–õ—é–±–∏–º—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n'
            elif group == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
                message += '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∞ –µ—â–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–æ–º–∞—à–∫–∏:\n'
            else:
                message += f'–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ {group}:\n'
            message += '\n'.join(row['–ò–º—è']+': '+row['–ù–∏–∫'] for _, row in df.iterrows())+'\n'
        message += '–ù—É –∏ —è, —Å–∫—Ä–æ–º–Ω—ã–π –±–æ—Ç:\n@'+update.get_bot().username
        await update.message.reply_text(message)

    async def add_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if context.user_data['auth'] != 'admin':
            await update.message.reply_text('–ü–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...')
            return
        if not context.args:
            date_to_add = date.today().strftime("%d-%m-%Y")
        else:
            date_to_add = context.args[0]

        self.lessons.append(date_to_add)
        self.lessons_passed = len(self.lessons)
        student_df = pd.read_csv(self.students)
        assistants = pd.read_csv(self.admins).query("–†–æ–ª—å == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'")['–ù–∏–∫'].to_list()
        if not assistants: assistants = [None]
        self.update_hw_ids_index()
        self.hw_ids.loc[:, str(self.lessons_passed)] = None
        n = str(self.lessons_passed)
        path = os.path.join(self.hwdir, str(n))
        if not os.path.exists(path):
            os.makedirs(path)

        student_df.loc[:, 'day_'+n+'_'+date_to_add] = None
        student_df.loc[:, 'day_'+n+'_hw_path'] = None
        student_df.loc[:, 'day_'+n+'_inspector'] = \
            randchoices(assistants, k = len(student_df))
        student_df.loc[:, 'day_'+n+'_comment'] = None
        student_df.loc[:, 'day_'+n+'_mark'] = None
        student_df.to_csv(self.students, index=False)

        await update.message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ {date_to_add}')

    async def hw_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Starts the homework handling."""
        if context.user_data['auth'] != 'student':
            await update.message.reply_text('–ü–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...')
            return ConversationHandler.END

        if context.args:
            context.user_data['hw_num'] = int(context.args[0])
            await update.message.reply_text(
                '–û—Ç–ª–∏—á–Ω–æ!\n'\
                f'–ü–æ—Ö–æ–∂–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ {context.user_data['hw_num']}.\n'\
                '–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–π —Ñ–∞–π–ª)',
            )
            return HW_FILE
        else:
            reply_keyboard = [[str(b) for b in range(max(self.lessons_passed - 3, 1), self.lessons_passed + 1)]]
            await update.message.reply_text(
                '–û—Ç–ª–∏—á–Ω–æ!'\
                '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å.\n'\
                '(–º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, –∞ –Ω–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–∂–∏–º–∞—Ç—å)',
                reply_markup=ReplyKeyboardMarkup(
                            reply_keyboard, one_time_keyboard=True,
                            )
                )
            return HW_NUM

    async def hw_num(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –¥–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∂–¥–∞—Ç—å —Ñ–∞–π–ª"""
        context.user_data['hw_num'] = int(update.message.text)
        await update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ!\n'\
        f'–ü–æ—Ö–æ–∂–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ {context.user_data['hw_num']}.\n'\
        '–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–π —Ñ–∞–π–ª)'
        )
        return HW_FILE

    async def hw_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –æ—Ç–º–µ—á–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—É—Ç—å –¥–æ –Ω–µ–≥–æ."""
        student_df = pd.read_csv(self.students)
        hw_ids_df = self.hw_ids
        row = context.user_data['num']
        col = f'day_{context.user_data['hw_num']}_hw_path'
        name = student_df.loc[row, '–ò–º—è']
        path = os.path.join(self.hwdir, f'{context.user_data['hw_num']}')
        # –∫–∞—á–∞–µ–º –≤ path —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        file = await update.message.document.get_file()
        filename = file.file_path.replace('\\', '/').split('/')[-1]
        filepath = os.path.join(path, name + '_' + filename)
        await file.download_to_drive(filepath)
        student_df.loc[row, col] = filepath
        hw_ids_df.loc[name, context.user_data['hw_num']] = file.file_id
        student_df.to_csv(self.students, index=False)
        insp_col = f'day_{context.user_data['hw_num']}_inspector'
        inspector = '' if not student_df.loc[row, insp_col] else \
            f'''–ü—Ä–æ–≤–µ—Ä—è—Ç—å –±—É–¥–µ—Ç {student_df.loc[row, insp_col]}\n'''
        await update.message.reply_text(
            '–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω)\n'+
            inspector+
            '–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, \n'\
            '–∏–Ω–∞—á–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
            reply_markup=ReplyKeyboardMarkup(
                [['üòÑ']], one_time_keyboard=True,
            )
        )
        return HW_QUESTION

    async def hw_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É"""
        student_df = pd.read_csv(self.students)
        row = context.user_data['num']
        col = f'day_{context.user_data['hw_num']}_comment'
        comment = update.message.text
        student_df.loc[row, col] = comment
        student_df.to_csv(self.students, index=False)
        await update.message.reply_text(
        f"""–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π —É–≤–∏–¥–∏—Ç —Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)""")
        return await self.hw_end(update, context)

    async def hw_end(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –¥–∑."""
        await update.message.reply_text(
        f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ {context.user_data['hw_num']} –ø—Ä–∏–Ω—è—Ç–æ.\n"\
        "–£–¥–∞—á–∏ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –æ–±—É—á–µ–Ω–∏–µ–º)")
        del context.user_data['hw_num']
        return ConversationHandler.END

    async def hw_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancels and ends the homework handling."""
        user = update.message.from_user
        logger.info("Student %s canceled hw handling.", user.first_name)
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def ch_get_all(self, assistant: str, context_data: dict) -> str:
        day = context_data['hw_num']
        assistant = '@'+assistant
        to_check = pd.read_csv(self.students).query(f"day_{day}_inspector == '{assistant}'")
        amount = len(to_check)
        not_handled = to_check.loc[to_check[f"day_{day}_hw_path"].isna()]
        handled = to_check.loc[to_check[f"day_{day}_hw_path"].notna()]
        to_check = handled.loc[handled[f"day_{day}_mark"].isna()]
        context_data['to_check'] = to_check
        context_data['to_check_set'] = {idx for idx in to_check.index}

        message = f'–í—Å–µ–≥–æ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {amount} —Ä–∞–±–æ—Ç, –ø—Ä–∏—á–µ–º {len(not_handled)} –µ—â–µ –Ω–µ —Å–¥–∞–Ω–æ\n'\
                  f'–°–µ–π—á–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {len(to_check)} –∑–∞–¥–∞–Ω–∏–π:\n'\
                  '\n'.join(f'{n} '+row['–ò–º—è'] for n, row in to_check.iterrows())
        return message

    async def ch_get_stud(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        stud_num = context.user_data['stud_num']
        stud = pd.read_csv(self.students).loc[stud_num]
        day = context.user_data['hw_num']
        text = f'{stud['–ò–º—è']}: {stud['–ù–∏–∫']}'
        if stud[f'day_{day}_comment']:
            text +='\n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n' + stud[f'day_{day}_comment']
        await update.message.reply_text(text)
        try:
            file = self.hw_ids.loc[stud['–ò–º—è'], day]
            if file is None: raise KeyError
        except KeyError:
            file = stud[f'day_{day}_hw_path']
        file_id = await update.message.reply_document(file)
        self.hw_ids.loc[stud['–ò–º—è'], day] = file_id
        return CH_STUD

    async def ch_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Starts the homework checking."""
        if context.user_data['auth'] != 'admin':
            await update.message.reply_text('–ü–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ...')
            return ConversationHandler.END

        if context.args:
            context.user_data['hw_num'] = int(context.args[0])
            assistant = update.message.from_user.username
            await update.message.reply_text(
                '–û—Ç–ª–∏—á–Ω–æ!\n' \
                f'–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∑ –Ω–æ–º–µ—Ä {context.user_data['hw_num']}.\n\n'+
                self.ch_get_all(assistant, context.user_data),
            )
            return CH_DAY
        else:
            return await self.ch_task(update, context)

    async def ch_num(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data['hw_num'] = int(update.message.text)
        assistant = update.message.from_user.username
        await update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ!\n'\
            f'–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∑ –Ω–æ–º–µ—Ä {context.user_data['hw_num']}.\n\n'+
                self.ch_get_all(assistant, context.user_data),
        )
        return CH_DAY

    async def ch_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        stud_num = int(update.message.text)
        if stud_num not in context.user_data['to_check_set']:
            text = '–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –∏–ª–∏ /next'
            await update.message.reply_text(text)
            return CH_DAY
        context.user_data['stud_num'] = stud_num
        return await self.ch_get_stud(update, context)

    async def ch_stud(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        student_df = pd.read_csv(self.students)
        row = context.user_data['stud_num']
        col = f'day_{context.user_data['hw_num']}_mark'
        mark = update.message.text
        student_df.loc[row, col] = mark
        student_df.to_csv(self.students, index=False)
        context.user_data['to_check_set'].remove(row)
        await update.message.reply_text(
            f"""–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞""")
        return await self.ch_next(update, context)

    async def ch_next(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        s = context.user_data['to_check_set']
        num = s.pop()
        s.add(num)
        context.user_data['stud_num'] = num
        return await self.ch_get_stud(update, context)

    async def ch_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        reply_keyboard = reply_keyboard = [[str(b) for b in range(max(self.lessons_passed - 3, 1), self.lessons_passed + 1)]]
        await update.message.reply_text(
            '–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –¥–∑, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å.\n',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True,
            )
        )
        return CH_NUM

    async def ch_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        assistant = update.message.from_user.username
        await update.message.reply_text(
            self.ch_get_all(assistant, context.user_data),
        )
        return CH_DAY

    async def ch_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        return ConversationHandler.END

if __name__ == '__main__':
    all_seeing_eye = IlluminatiBot()
    print('inited')
    all_seeing_eye.run()